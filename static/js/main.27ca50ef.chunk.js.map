{"version":3,"sources":["components/Weather.js","components/Form.js","components/Title.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","react_default","a","createElement","className","icon","city","country","description","temp","temp_hi","temp_lo","humidity","wind","error","Form","onSubmit","handleSubmit","type","name","placeholder","required","Title","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","sys","_this","setState","main","temp_max","temp_min","speed","weather","id","stop","components_Title","components_Form","this","components_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27ca50ef.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather = props => {\r\n  return (\r\n    <div className=\"weather-container\">\r\n      {/* Rendering items conditionally based on whether the prop exists in the application's state. */}\r\n      {props.icon && <div className={props.icon} />}\r\n      {props.city && props.country && (\r\n        <p className=\"weather__key\">\r\n          Location:{' '}\r\n          <span className=\"weather__value\">\r\n            {props.city}, {props.country}\r\n          </span>\r\n        </p>\r\n      )}\r\n      {props.description && (\r\n        <p className=\"weather__key\">\r\n          Current conditions:{' '}\r\n          <span className=\"weather__value\">{props.description}</span>\r\n        </p>\r\n      )}\r\n      {props.temp && (\r\n        <p className=\"weather__key\">\r\n          Current temperature:{' '}\r\n          <span className=\"weather__value\">{props.temp}F</span>\r\n        </p>\r\n      )}\r\n      {props.temp_hi && (\r\n        <p className=\"weather__key\">\r\n          Temperature high:{' '}\r\n          <span className=\"weather__value\">{props.temp_hi}F</span>\r\n        </p>\r\n      )}\r\n      {props.temp_lo && (\r\n        <p className=\"weather__key\">\r\n          Temperature low:{' '}\r\n          <span className=\"weather__value\">{props.temp_lo}F</span>\r\n        </p>\r\n      )}\r\n      {props.humidity && (\r\n        <p className=\"weather__key\">\r\n          Humidity: <span className=\"weather__value\">{props.humidity}%</span>\r\n        </p>\r\n      )}\r\n      {props.wind && (\r\n        <p className=\"weather__key\">\r\n          Wind: <span className=\"weather__value\">{props.wind}mph</span>\r\n        </p>\r\n      )}\r\n\r\n      {/* Render an error if error in state is flagged true. */}\r\n      {props.error && (\r\n        <p className=\"weather__error\">\r\n          Invalid input, please enter a valid city and country name.\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React from 'react';\r\n\r\nconst Form = props => {\r\n  return (\r\n    <div className=\"form-container\">\r\n      <form onSubmit={props.handleSubmit}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City..\" required />\r\n        <input type=\"text\" name=\"country\" placeholder=\"Country..\" required />\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst Title = () => {\r\n  return (\r\n    <div className=\"title-container\">\r\n      <h1>Weather App</h1>\r\n      <h2>By Sherial Jawed</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import React, { Component } from 'react';\r\nimport Weather from './components/Weather';\r\nimport Form from './components/Form';\r\nimport Title from './components/Title';\r\n\r\n// Openweathermap API key.\r\nconst API_KEY = 'c12fe007e595d2d25fd40b06cbc86df5';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    city: undefined,\r\n    country: undefined,\r\n    temp: undefined,\r\n    temp_hi: undefined,\r\n    temp_lo: undefined,\r\n    humidity: undefined,\r\n    wind: undefined,\r\n    description: undefined,\r\n    icon: undefined,\r\n    error: false\r\n  };\r\n\r\n  handleSubmit = async e => {\r\n    e.preventDefault();\r\n\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n\r\n    // Api call to OpenWeatherMap's API.\r\n    const api_call = await fetch(\r\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=Imperial`\r\n    );\r\n    const data = await api_call.json();\r\n\r\n    if (data.name && data.sys.country) {\r\n      this.setState({\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        temp: data.main.temp,\r\n        temp_hi: data.main.temp_max,\r\n        temp_lo: data.main.temp_min,\r\n        humidity: data.main.humidity,\r\n        wind: data.wind.speed,\r\n        description: data.weather[0].description,\r\n        // Using OWFont (css/owfont-*) classnames to replace standard icons provided by OpenWeatherMap's API.\r\n        icon: `owf owf-${data.weather[0].id} owf-5x`,\r\n        error: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        // Reset state and trigger error if invalid response.\r\n        city: undefined,\r\n        country: undefined,\r\n        temp: undefined,\r\n        temp_hi: undefined,\r\n        temp_lo: undefined,\r\n        humidity: undefined,\r\n        wind: undefined,\r\n        description: undefined,\r\n        icon: undefined,\r\n        error: true\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Title />\r\n        <Form handleSubmit={this.handleSubmit} />\r\n        <Weather\r\n          city={this.state.city}\r\n          country={this.state.country}\r\n          temp={this.state.temp}\r\n          temp_hi={this.state.temp_hi}\r\n          temp_lo={this.state.temp_lo}\r\n          humidity={this.state.humidity}\r\n          wind={this.state.wind}\r\n          description={this.state.description}\r\n          icon={this.state.icon}\r\n          error={this.state.error}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}